// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SurveyAnswered extends ethereum.Event {
  get params(): SurveyAnswered__Params {
    return new SurveyAnswered__Params(this);
  }
}

export class SurveyAnswered__Params {
  _event: SurveyAnswered;

  constructor(event: SurveyAnswered) {
    this._event = event;
  }

  get fileCID(): string {
    return this._event.parameters[0].value.toString();
  }

  get answers(): Array<i32> {
    return this._event.parameters[1].value.toI32Array();
  }

  get zkAnswers(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class SurveyPublished extends ethereum.Event {
  get params(): SurveyPublished__Params {
    return new SurveyPublished__Params(this);
  }
}

export class SurveyPublished__Params {
  _event: SurveyPublished;

  constructor(event: SurveyPublished) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get fileCID(): string {
    return this._event.parameters[1].value.toString();
  }

  get numberOfQuestions(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewardByAnswer(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get zkSources(): Array<SurveyPublishedZkSourcesStruct> {
    return this._event.parameters[5].value.toTupleArray<
      SurveyPublishedZkSourcesStruct
    >();
  }

  get questionZkSource(): Array<Bytes> {
    return this._event.parameters[6].value.toBytesArray();
  }
}

export class SurveyPublishedZkSourcesStruct extends ethereum.Tuple {
  get minimumRequired(): BigInt {
    return this[0].toBigInt();
  }

  get groupId(): Bytes {
    return this[1].toBytes();
  }
}

export class Contract__configResultValue0Struct extends ethereum.Tuple {
  get appId(): Bytes {
    return this[0].toBytes();
  }

  get vault(): Contract__configResultValue0VaultStruct {
    return changetype<Contract__configResultValue0VaultStruct>(
      this[1].toTuple()
    );
  }
}

export class Contract__configResultValue0VaultStruct extends ethereum.Tuple {
  get isImpersonationMode(): boolean {
    return this[0].toBoolean();
  }
}

export class Contract__getSurveyResultValue0Struct extends ethereum.Tuple {
  get rewardByAnswer(): BigInt {
    return this[0].toBigInt();
  }

  get remainingRewardToken(): BigInt {
    return this[1].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get numberOfQuestions(): BigInt {
    return this[3].toBigInt();
  }

  get zkSourceStartIndex(): BigInt {
    return this[4].toBigInt();
  }

  get zkSourceNumber(): BigInt {
    return this[5].toBigInt();
  }

  get questionZkSourceStartIndex(): BigInt {
    return this[6].toBigInt();
  }

  get questionZkSourceNumber(): BigInt {
    return this[7].toBigInt();
  }
}

export class Contract__surveysResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getRewardByAnswer(): BigInt {
    return this.value0;
  }

  getRemainingRewardToken(): BigInt {
    return this.value1;
  }

  getEndTimestamp(): BigInt {
    return this.value2;
  }

  getNumberOfQuestions(): BigInt {
    return this.value3;
  }

  getZkSourceStartIndex(): BigInt {
    return this.value4;
  }

  getZkSourceNumber(): BigInt {
    return this.value5;
  }

  getQuestionZkSourceStartIndex(): BigInt {
    return this.value6;
  }

  getQuestionZkSourceNumber(): BigInt {
    return this.value7;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  ADDRESSES_PROVIDER_V2(): Address {
    let result = super.call(
      "ADDRESSES_PROVIDER_V2",
      "ADDRESSES_PROVIDER_V2():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESSES_PROVIDER_V2(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESSES_PROVIDER_V2",
      "ADDRESSES_PROVIDER_V2():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  APP_ID(): Bytes {
    let result = super.call("APP_ID", "APP_ID():(bytes16)", []);

    return result[0].toBytes();
  }

  try_APP_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("APP_ID", "APP_ID():(bytes16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  IS_IMPERSONATION_MODE(): boolean {
    let result = super.call(
      "IS_IMPERSONATION_MODE",
      "IS_IMPERSONATION_MODE():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_IS_IMPERSONATION_MODE(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "IS_IMPERSONATION_MODE",
      "IS_IMPERSONATION_MODE():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  SISMO_CONNECT_LIB_VERSION(): BigInt {
    let result = super.call(
      "SISMO_CONNECT_LIB_VERSION",
      "SISMO_CONNECT_LIB_VERSION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SISMO_CONNECT_LIB_VERSION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SISMO_CONNECT_LIB_VERSION",
      "SISMO_CONNECT_LIB_VERSION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  anwers(param0: string, param1: BigInt): boolean {
    let result = super.call("anwers", "anwers(string,uint256):(bool)", [
      ethereum.Value.fromString(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_anwers(param0: string, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("anwers", "anwers(string,uint256):(bool)", [
      ethereum.Value.fromString(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  config(): Contract__configResultValue0Struct {
    let result = super.call("config", "config():((bytes16,(bool)))", []);

    return changetype<Contract__configResultValue0Struct>(result[0].toTuple());
  }

  try_config(): ethereum.CallResult<Contract__configResultValue0Struct> {
    let result = super.tryCall("config", "config():((bytes16,(bool)))", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__configResultValue0Struct>(value[0].toTuple())
    );
  }

  getSurvey(fileCID: string): Contract__getSurveyResultValue0Struct {
    let result = super.call(
      "getSurvey",
      "getSurvey(string):((uint256,uint256,uint256,uint32,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromString(fileCID)]
    );

    return changetype<Contract__getSurveyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSurvey(
    fileCID: string
  ): ethereum.CallResult<Contract__getSurveyResultValue0Struct> {
    let result = super.tryCall(
      "getSurvey",
      "getSurvey(string):((uint256,uint256,uint256,uint32,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromString(fileCID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getSurveyResultValue0Struct>(value[0].toTuple())
    );
  }

  surveyCount(): BigInt {
    let result = super.call("surveyCount", "surveyCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_surveyCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("surveyCount", "surveyCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  surveys(param0: string): Contract__surveysResult {
    let result = super.call(
      "surveys",
      "surveys(string):(uint256,uint256,uint256,uint32,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromString(param0)]
    );

    return new Contract__surveysResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_surveys(param0: string): ethereum.CallResult<Contract__surveysResult> {
    let result = super.tryCall(
      "surveys",
      "surveys(string):(uint256,uint256,uint256,uint32,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__surveysResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get appId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AnswerSurveyCall extends ethereum.Call {
  get inputs(): AnswerSurveyCall__Inputs {
    return new AnswerSurveyCall__Inputs(this);
  }

  get outputs(): AnswerSurveyCall__Outputs {
    return new AnswerSurveyCall__Outputs(this);
  }
}

export class AnswerSurveyCall__Inputs {
  _call: AnswerSurveyCall;

  constructor(call: AnswerSurveyCall) {
    this._call = call;
  }

  get fileCID(): string {
    return this._call.inputValues[0].value.toString();
  }

  get sismoConnectResponse(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get answers(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class AnswerSurveyCall__Outputs {
  _call: AnswerSurveyCall;

  constructor(call: AnswerSurveyCall) {
    this._call = call;
  }
}

export class PublishSurveyCall extends ethereum.Call {
  get inputs(): PublishSurveyCall__Inputs {
    return new PublishSurveyCall__Inputs(this);
  }

  get outputs(): PublishSurveyCall__Outputs {
    return new PublishSurveyCall__Outputs(this);
  }
}

export class PublishSurveyCall__Inputs {
  _call: PublishSurveyCall;

  constructor(call: PublishSurveyCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get fileCID(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _numberOfQuestions(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _rewardByAnswer(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _endTimestamp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _zkSources(): Array<PublishSurveyCall_zkSourcesStruct> {
    return this._call.inputValues[5].value.toTupleArray<
      PublishSurveyCall_zkSourcesStruct
    >();
  }

  get _questionZkSource(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }
}

export class PublishSurveyCall__Outputs {
  _call: PublishSurveyCall;

  constructor(call: PublishSurveyCall) {
    this._call = call;
  }
}

export class PublishSurveyCall_zkSourcesStruct extends ethereum.Tuple {
  get minimumRequired(): BigInt {
    return this[0].toBigInt();
  }

  get groupId(): Bytes {
    return this[1].toBytes();
  }
}

export class RefillSurveyCall extends ethereum.Call {
  get inputs(): RefillSurveyCall__Inputs {
    return new RefillSurveyCall__Inputs(this);
  }

  get outputs(): RefillSurveyCall__Outputs {
    return new RefillSurveyCall__Outputs(this);
  }
}

export class RefillSurveyCall__Inputs {
  _call: RefillSurveyCall;

  constructor(call: RefillSurveyCall) {
    this._call = call;
  }

  get fileCID(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RefillSurveyCall__Outputs {
  _call: RefillSurveyCall;

  constructor(call: RefillSurveyCall) {
    this._call = call;
  }
}
